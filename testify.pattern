#Rule
#(1) we use regex
#(2) s///g is the sed replace rule
#(3) use \(.*\) to extract the specific unchanged string

#Example: c *check.C ===> t *testing.T
s/c \\*check.C/t \\*testing.T/g

#Example: github.com/pingcap/ticdc/pkg/util/testleak ===> ''
s/\\"github.com\\/pingcap\\/ticdc\\/pkg\\/util\\/testleak\\"/ /g

#Example: defer testleak.AfterTest(c)() ===> ""
s/defer testleak.AfterTest(c)()/ /g 


#Example: github.com/pingcap/check ===> github.com/stretchr/testify/require
s/github.com\\/pingcap\\/check/github.com\\/stretchr\\/testify\\/require/g

#Example: github.com/pingcap/tidb/util/testkit ===> github.com/pingcap/tidb/testkit
s/github.com\\/pingcap\\/tidb\\/util\\/testkit/github.com\\/pingcap\\/tidb\\/testkit/g

#Example: c.Assert(ddl, check.IsNil) ===>  require.Nil(t, ddl)
s/.*c.Assert(\\(.*\\), check.IsNil).*/require.Nil(t, \\1)/g

#Example: c.Assert(tableID, check.Equals, int64(12345)) ===> require.Equal(t,tableID, int64(12345))
s/.*c.Assert(\\(.*\\), check.Equals, \\(.*\\)).*/require.Equal(t, \\1, \\2)/g

#Example: c.Assert(tableID, check.DeepEquals, int64(12345)) ===> require.Equal(t,tableID, int64(12345))
s/.*c.Assert(\\(.*\\), check.DeepEquals, \\(.*\\)).*/require.Equal(t, \\1, \\2)/g

#Example: c.Assert(ok, check.IsTrue) ===> require.True(t, ok)
s/.*c.Assert(\\(.*\\), check.IsTrue).*/require.True(t, \\1)/g

#Example: c.Assert(ok, check.IsFalse) ===> require.False(t, ok)
s/.*c.Assert(\\(.*\\), check.IsFalse).*/require.False(t, \\1)/g

#Example: c.Assert(list, HasLen, 5) ===> require.Len(t, list, 5)
s/.*c.Assert(\\(.*\\), check.HasLen, \\(.*\\)).*/require.Len(t, \\1, \\2)/g

#Example: c.Assert(iface, NotNil) ===> require.NotNil(t, iface)
s/.*c.Assert(\\(.*\\), check.NotNil).*/require.NotNil(t, \\1)/g

#Example: c.Assert(time.Since(startTime), check.Less, time.Second) ===> require.Less(t, time.Since(startTime), time.Second)
s/.*c.Assert(\\(.*\\), check.Less, \\(.*\\)).*/require.Less(t, \\1, \\2)/g

#Example: c.Assert(time.Since(startTime), check.Greater, time.Second) ===> require.Greater(t, time.Since(startTime), time.Second)
s/.*c.Assert(\\(.*\\), check.Greater, \\(.*\\)).*/require.Greater(t, \\1, \\2)/g

#Example: c.Assert(time.Since(startTime), check.GreaterEqual, time.Second) ===> require.GreaterOrEqual(t, time.Since(startTime, time.Second)
s/.*c.Assert(\\(.*\\), check.GreaterEqual, \\(.*\\)).*/require.GreaterOrEqual(t, \\1, \\2)/g

#Example: c.Assert(time.Since(startTime), check.LessEqual, time.Second) ===> require.LessOrEqual(t, time.Since(startTime, time.Second)
s/.*c.Assert(\\(.*\\), check.LessEqual, \\(.*\\)).*/require.LessOrEqual(t, \\1, \\2)/g

#Example: c.Assert(IsTablesPaired(test.tables), check.Equals, test.isParied, check.Commentf("%v", test)) ===> require.Equal(t, IsTablesPaired(test.tables), test.isParied, "v", test)
s/.*c.Assert(\\(.*\\), check.Equals, \\(.*\\), check.Commentf(\\(.*\\), \\(.*\\))).*/require.Equal(t, \\1, \\2, \\3, \\4)/g

#Example: c.Assert(err, check.ErrorMatches, "test error") ===> require.Regexp(t, "test.*", fmt.Errorf("test error"))
s/.*c.Assert(\\(.*\\), check.ErrorMatches, \\(.*\\)).*/require.Regexp(t, \\1, \\2)/g

